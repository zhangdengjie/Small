//--------------------------------------------------------------------------------------------------
// Scripts to install plugin to local repository [~/.m2/repository]
// > ./gradlew install
//--------------------------------------------------------------------------------------------------
apply plugin: 'groovy'

repositories {
    jcenter()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
}

apply from: 'provided.gradle'

apply plugin: 'maven'

//--------------------------------------------------------------------------------------------------
// Scripts to upload plugin to Bintray/JCenter [https://bintray.com/]
// > ./gradlew bintrayUpload
//--------------------------------------------------------------------------------------------------
task bintrayUpload(type: GradleBuild, dependsOn: 'clean') {
    buildFile = 'bintray.gradle'
    tasks = ['bintrayUpload']
}

//--------------------------------------------------------------------------------------------------
// Scripts to upload plugin to Gradle Plugins Portal [https://plugins.gradle.org/]
// > ./gradlew publish
//--------------------------------------------------------------------------------------------------
task publish(type: GradleBuild, dependsOn: 'clean') {
    buildFile = 'publish.gradle'
    tasks = ['build']
}

//--------------------------------------------------------------------------------------------------
// Helper scripts
//--------------------------------------------------------------------------------------------------
task('changes').doLast {
    def changelog = project.file('CHANGELOG.md')
    if (!changelog.exists()) return
    def br = new BufferedReader(new FileReader(changelog))
    def top = br.readLine()
    br.close()

    def loc = top.indexOf('(')
    if (loc < 0) return
    def date = top.substring(loc + 1)
    loc = date.indexOf(')')
    date = date.substring(0, loc)

    // def log = "git log --pretty=format:'%cd %cn %s' --date=short --since=$date --oneline ${project.projectDir}"
    project.exec {
        executable 'git'
        args 'log', '--pretty=format:%cd #%h @%cn %s', '--date=short', "--since=$date", project.projectDir
    }
    // println log.execute().text
}

uploadArchives {
    doLast {
        println "编译后删除build文件夹"
        delete project.buildDir
    }
}
